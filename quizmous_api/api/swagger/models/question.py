# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from .base_model_ import Model
from .question_type import QuestionType
from .answer import Answer
from .. import util


class Question(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, question: str=None, type: QuestionType=None, required: bool=None, answers: List[Answer]=None):  # noqa: E501
        """Question - a model defined in Swagger

        :param id: The id of this Question.  # noqa: E501
        :type id: int
        :param question: The question of this Question.  # noqa: E501
        :type question: str
        :param type: The type of this Question.  # noqa: E501
        :type type: QuestionType
        :param required: The required of this Question.  # noqa: E501
        :type required: bool
        :param answers: The answers of this Question.  # noqa: E501
        :type answers: List[Answer]
        """
        self.swagger_types = {
            'id': int,
            'question': str,
            'type': QuestionType,
            'required': bool,
            'answers': List[Answer]
        }

        self.attribute_map = {
            'id': 'id',
            'question': 'question',
            'type': 'type',
            'required': 'required',
            'answers': 'answers'
        }

        self._id = id
        self._question = question
        self._type = type
        self._required = required
        self._answers = answers

    @classmethod
    def from_dict(cls, dikt) -> 'Question':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Question of this Question.  # noqa: E501
        :rtype: Question
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Question.


        :return: The id of this Question.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Question.


        :param id: The id of this Question.
        :type id: int
        """

        self._id = id

    @property
    def question(self) -> str:
        """Gets the question of this Question.


        :return: The question of this Question.
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question: str):
        """Sets the question of this Question.


        :param question: The question of this Question.
        :type question: str
        """

        self._question = question

    @property
    def type(self) -> QuestionType:
        """Gets the type of this Question.


        :return: The type of this Question.
        :rtype: QuestionType
        """
        return self._type

    @type.setter
    def type(self, type: QuestionType):
        """Sets the type of this Question.


        :param type: The type of this Question.
        :type type: QuestionType
        """

        self._type = type

    @property
    def required(self) -> bool:
        """Gets the required of this Question.


        :return: The required of this Question.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required: bool):
        """Sets the required of this Question.


        :param required: The required of this Question.
        :type required: bool
        """

        self._required = required

    @property
    def answers(self) -> List[Answer]:
        """Gets the answers of this Question.


        :return: The answers of this Question.
        :rtype: List[Answer]
        """
        return self._answers

    @answers.setter
    def answers(self, answers: List[Answer]):
        """Sets the answers of this Question.


        :param answers: The answers of this Question.
        :type answers: List[Answer]
        """

        self._answers = answers
