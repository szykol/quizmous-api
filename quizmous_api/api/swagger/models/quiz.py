# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from .base_model_ import Model
from .get_user import GetUser
from .question import Question
from .. import util


class Quiz(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, quiz_id: int=None, author: GetUser=None, name: str=None, description: str=None, questions: List[Question]=None):  # noqa: E501
        """Quiz - a model defined in Swagger

        :param quiz_id: The quiz_id of this Quiz.  # noqa: E501
        :type quiz_id: int
        :param author: The author of this Quiz.  # noqa: E501
        :type author: GetUser
        :param name: The name of this Quiz.  # noqa: E501
        :type name: str
        :param description: The description of this Quiz.  # noqa: E501
        :type description: str
        :param questions: The questions of this Quiz.  # noqa: E501
        :type questions: List[Question]
        """
        self.swagger_types = {
            'quiz_id': int,
            'author': GetUser,
            'name': str,
            'description': str,
            'questions': List[Question]
        }

        self.attribute_map = {
            'quiz_id': 'quiz_id',
            'author': 'author',
            'name': 'name',
            'description': 'description',
            'questions': 'questions'
        }

        self._quiz_id = quiz_id
        self._author = author
        self._name = name
        self._description = description
        self._questions = questions

    @classmethod
    def from_dict(cls, dikt) -> 'Quiz':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Quiz of this Quiz.  # noqa: E501
        :rtype: Quiz
        """
        return util.deserialize_model(dikt, cls)

    @property
    def quiz_id(self) -> int:
        """Gets the quiz_id of this Quiz.


        :return: The quiz_id of this Quiz.
        :rtype: int
        """
        return self._quiz_id

    @quiz_id.setter
    def quiz_id(self, quiz_id: int):
        """Sets the quiz_id of this Quiz.


        :param quiz_id: The quiz_id of this Quiz.
        :type quiz_id: int
        """

        self._quiz_id = quiz_id

    @property
    def author(self) -> GetUser:
        """Gets the author of this Quiz.


        :return: The author of this Quiz.
        :rtype: GetUser
        """
        return self._author

    @author.setter
    def author(self, author: GetUser):
        """Sets the author of this Quiz.


        :param author: The author of this Quiz.
        :type author: GetUser
        """

        self._author = author

    @property
    def name(self) -> str:
        """Gets the name of this Quiz.


        :return: The name of this Quiz.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Quiz.


        :param name: The name of this Quiz.
        :type name: str
        """

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this Quiz.


        :return: The description of this Quiz.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Quiz.


        :param description: The description of this Quiz.
        :type description: str
        """

        self._description = description

    @property
    def questions(self) -> List[Question]:
        """Gets the questions of this Quiz.


        :return: The questions of this Quiz.
        :rtype: List[Question]
        """
        return self._questions

    @questions.setter
    def questions(self, questions: List[Question]):
        """Sets the questions of this Quiz.


        :param questions: The questions of this Quiz.
        :type questions: List[Question]
        """

        self._questions = questions
